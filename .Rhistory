ExpData(data=covid_table2, type=2)
# We import from the Excel files
covid_table1 <- read_excel("covid-data/Table\ 1.xlsx", na = "NI")
covid_table2 <- read_excel("covid-data/Table\ 2.xlsx", na = "NI")
# Because there's two header rows, we need to use the first row as the header
names(covid_table1) <- covid_table1[1,]
covid_table1 <- covid_table1[-1,]
# The first cell in the first column is a joint cell, meaning the cell 1,1 is now empty
covid_table2[1,1] <- "ID"
# Now we can do the same thing we did with Table1
names(covid_table2) <- covid_table2[1,]
covid_table2 <- covid_table2[-1,]
for (i in 1:nrow(covid_table2)){
if(is.na(covid_table2[i,1])){
covid_table2[i,1] <- last_value
} else{
last_value <- covid_table2[i,1]
}
}
# When checking with the function ExpData, we can see all of our vairable types are Char, and we can also see we only have two missing values in Table1 (which were empty Excel cells), and none in Table 2.
# If we look at the Excel files, we will see the missing values are marked as NI. We have to replace this with NA.
ExpData(data=covid_table1, type=2)
ExpData(data=covid_table2, type=2)
# Table2 has two types of missing values: NI and ND. NI were replaced by NA when importing the data, but we still have ND values.
covid_table2 <- replace(covid_table2, covid_table2 == "ND", NA)
ExpData(data=covid_table2, type=2)
ExpData(data=covid_table1, type=2)
ExpData(data=covid_table2, type=2)
covid_table2 <- read_excel("covid-data/Table\ 2.xlsx", na = "NI", col_types = "numeric")
# The first cell in the first column is a joint cell, meaning the cell 1,1 is now empty
covid_table2[1,1] <- "ID"
View(covid_table2)
View(covid_table2)
covid_table2 <- read_excel("covid-data/Table\ 2.xlsx", na = "NI", col_types = c("text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
# The first cell in the first column is a joint cell, meaning the cell 1,1 is now empty
covid_table2[1,1] <- "ID"
# Now we can do the same thing we did with Table1
names(covid_table2) <- covid_table2[1,]
covid_table2 <- covid_table2[-1,]
View(covid_table2)
View(covid_table2)
for (i in 1:nrow(covid_table2)){
if(is.na(covid_table2[i,1])){
covid_table2[i,1] <- last_value
} else{
last_value <- covid_table2[i,1]
}
}
# Table2 has two types of missing values: NI and ND. NI were replaced by NA when importing the data, but we still have ND values.
covid_table2 <- replace(covid_table2, covid_table2 == "ND", NA)
ExpData(data=covid_table2, type=2)
covid_table2 <- read_excel("covid-data/Table\ 2.xlsx", na = "NI")
# Because there's two header rows, we need to use the first row as the header
names(covid_table1) <- covid_table1[1,]
covid_table1 <- covid_table1[-1,]
# The first cell in the first column is a joint cell, meaning the cell 1,1 is now empty
covid_table2[1,1] <- "ID"
# Now we can do the same thing we did with Table1
names(covid_table2) <- covid_table2[1,]
covid_table2 <- covid_table2[-1,]
covid_table2 <- covid_table2[-1,]
for (i in 1:nrow(covid_table2)){
if(is.na(covid_table2[i,1])){
covid_table2[i,1] <- last_value
} else{
last_value <- covid_table2[i,1]
}
}
# Table2 has two types of missing values: NI and ND. NI were replaced by NA when importing the data, but we still have ND values.
covid_table2 <- replace(covid_table2, covid_table2 == "ND", NA)
ExpData(data=covid_table2, type=2)
covid_table1[,2] <- as.numeric(covid_table1[,2])
ExpData(data=covid_table1, type=2)
View(covid_table1)
View(covid_table1)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(DataExplorer)
library(mlbench)
library(GGally)
library(tidyverse)
library(vtable)
library(SmartEDA)
library(corrplot)
heart_data <- read.csv("data/heart_disease_dataset.csv", sep=" ", na.strings="?")
colnames(heart_data) <- c("Age", "Sex", "ChestPain", "RBP", "Cholesterol", "FastingBloodSugar", "RestingECResults", "MaxHeartRate", "ExInducedAngina", "Oldpeak", "Slope", "NbMajorVessels", "Thalassemia", "DiagnosisHD", "PatetientID")
# We use dim() to obtain the number of rows and columns on our dataset
dim(heart_data)
cont_features <- c("Age", "RBP", "Cholesterol", "MaxHeartRate", "Oldpeak")
cat_features <- c("Sex", "ChestPain", "FastingBloodSugar", "RestingECResults", "ExInducedAngina", "Slope", "NbMajorVessels", "Thalassemia", "DiagnosisHD")
# We replace the numbers with "male" and "female" for the Sex column
heart_data["Sex"][heart_data["Sex"] == 1] <- "male"
heart_data["Sex"][heart_data["Sex"] == 0] <- "female"
ExpData(data=heart_data, type=2, fun = c("min", "max"))
heart_data$NbMajorVessels[is.na(heart_data$NbMajorVessels)] <- median(heart_data$NbMajorVessels, na.rm = TRUE)
heart_data$Thalassemia[is.na(heart_data$Thalassemia)] <- median(heart_data$Thalassemia, na.rm = TRUE)
heart_data
library(readxl)
# We import from the Excel files
covid_table1 <- read_excel("covid-data/Table\ 1.xlsx", na = "NI")
covid_table2 <- read_excel("covid-data/Table\ 2.xlsx", na = "NI")
# Because there's two header rows, we need to use the first row as the header
names(covid_table1) <- covid_table1[1,]
covid_table1 <- covid_table1[-1,]
# The first cell in the first column is a joint cell, meaning the cell 1,1 is now empty
covid_table2[1,1] <- "ID"
# Now we can do the same thing we did with Table1
names(covid_table2) <- covid_table2[1,]
covid_table2 <- covid_table2[-1,]
# The second table has joint cells in the first column. This translates to empty cells in our dataframe. To fix this:
for (i in 1:nrow(covid_table2)){
if(is.na(covid_table2[i,1])){
covid_table2[i,1] <- last_value
} else{
last_value <- covid_table2[i,1]
}
}
# Table2 has two types of missing values: NI and ND. NI were replaced by NA when importing the data, but we still have ND values.
covid_table2 <- replace(covid_table2, covid_table2 == "ND", NA)
ExpData(data=covid_table1, type=2)
ExpData(data=covid_table2, type=2)
# When checking with the function ExpData, we can see all of our vairable types are Char.
#covid_table1[,2] <- as.numeric(covid_table1[,2])
#ExpData(data=covid_table1, type=2)
sessionInfo()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(DataExplorer)
library(mlbench)
library(GGally)
library(tidyverse)
library(vtable)
library(SmartEDA)
library(corrplot)
heart_data <- read.csv("data/heart_disease_dataset.csv", sep=" ", na.strings="?")
colnames(heart_data) <- c("Age", "Sex", "ChestPain", "RBP", "Cholesterol", "FastingBloodSugar", "RestingECResults", "MaxHeartRate", "ExInducedAngina", "Oldpeak", "Slope", "NbMajorVessels", "Thalassemia", "DiagnosisHD", "PatetientID")
# We use dim() to obtain the number of rows and columns on our dataset
dim(heart_data)
cont_features <- c("Age", "RBP", "Cholesterol", "MaxHeartRate", "Oldpeak")
cat_features <- c("Sex", "ChestPain", "FastingBloodSugar", "RestingECResults", "ExInducedAngina", "Slope", "NbMajorVessels", "Thalassemia", "DiagnosisHD")
# We replace the numbers with "male" and "female" for the Sex column
heart_data["Sex"][heart_data["Sex"] == 1] <- "male"
heart_data["Sex"][heart_data["Sex"] == 0] <- "female"
ExpData(data=heart_data, type=2, fun = c("min", "max"))
heart_data$NbMajorVessels[is.na(heart_data$NbMajorVessels)] <- median(heart_data$NbMajorVessels, na.rm = TRUE)
heart_data$Thalassemia[is.na(heart_data$Thalassemia)] <- median(heart_data$Thalassemia, na.rm = TRUE)
heart_data
library(readxl)
# We import from the Excel files
covid_table1 <- read_excel("covid-data/Table\ 1.xlsx", na = "NI")
covid_table2 <- read_excel("covid-data/Table\ 2.xlsx", na = "NI")
# Because there's two header rows, we need to use the first row as the header
names(covid_table1) <- covid_table1[1,]
covid_table1 <- covid_table1[-1,]
# The first cell in the first column is a joint cell, meaning the cell 1,1 is now empty
covid_table2[1,1] <- "ID"
# Now we can do the same thing we did with Table1
names(covid_table2) <- covid_table2[1,]
covid_table2 <- covid_table2[-1,]
# The second table has joint cells in the first column. This translates to empty cells in our dataframe. To fix this:
for (i in 1:nrow(covid_table2)){
if(is.na(covid_table2[i,1])){
covid_table2[i,1] <- last_value
} else{
last_value <- covid_table2[i,1]
}
}
# Table2 has two types of missing values: NI and ND. NI were replaced by NA when importing the data, but we still have ND values.
covid_table2 <- replace(covid_table2, covid_table2 == "ND", NA)
ExpData(data=covid_table1, type=2)
# For the gender column mistakes, we have no indication of what the correct value is. We replace it with NA.
covid_table1$Gender[!(covid_table1$Gender %in% c("F", "M"))] <- NA
# Same for the Death column
covid_table1$Death[!(covid_table1$Death %in% c("No", "Yes"))] <- NA
# For the "Admission to ICU", "ARDS Diagnosis", "CRS Diagnosis", "Use of NIV" and "Use of AMV", we can use the following rule based on the related "Days with -" value. If the "Days with -" value is 0, then it's a No. If it's >0, it's yes.
covid_table1$`Admission to ICU`[(!(covid_table1$`Admission to ICU` %in% c("Yes", "No")) & covid_table1$`Days in ICU` == 0)] <- "No"
covid_table1$`Admission to ICU`[(!(covid_table1$`Admission to ICU` %in% c("Yes", "No")) & covid_table1$`Days in ICU` >= 0)] <- "Yes"
covid_table1$`ARDS Diagnosis`[(!(covid_table1$`ARDS Diagnosis` %in% c("Yes", "No")) & covid_table1$`Days with ARDS` == 0)] <- "No"
covid_table1$`ARDS Diagnosis`[(!(covid_table1$`ARDS Diagnosis` %in% c("Yes", "No")) & covid_table1$`Days with ARDS` >= 0)] <- "Yes"
covid_table1$`CRS Diagnosis`[(!(covid_table1$`CRS Diagnosis` %in% c("Yes", "No")) & covid_table1$`Days with CRS` == 0)] <- "No"
covid_table1$`CRS Diagnosis`[(!(covid_table1$`CRS Diagnosis` %in% c("Yes", "No")) & covid_table1$`Days with CRS` >= 0)] <- "Yes"
covid_table1$`Use of NIV`[(!(covid_table1$`Use of NIV` %in% c("Yes", "No")) & covid_table1$`Days with NIV` == 0)] <- "No"
covid_table1$`Use of NIV`[(!(covid_table1$`Use of NIV` %in% c("Yes", "No")) & covid_table1$`Days with NIV` >= 0)] <- "Yes"
covid_table1$`Use of AMV`[(!(covid_table1$`Use of AMV` %in% c("Yes", "No")) & covid_table1$`Days with AMV` == 0)] <- "No"
covid_table1$`Use of AMV`[(!(covid_table1$`Use of AMV` %in% c("Yes", "No")) & covid_table1$`Days with AMV` >= 0)] <- "Yes"
ExpData(data=covid_table1, type=2)
ExpData(data=covid_table2, type=2)
# When checking with the function ExpData, we can see all of our vairable types are Char.
# We turn the column BMI to numeric:
covid_table1$BMI <- as.numeric(covid_table1$BMI)
#We turn the columns Age, Days in ICU, Days with ARDS, Days with CRS, Days with NIV, Days with AMV and Days of hospitalization into integers (we use column indexes).
for(i in c(2, 8, 10, 12, 14, 16, 17)){
covid_table1[,i] <- sapply(covid_table1[,i], as.integer)
}
# The first column, Day, is integer
covid_table2$Day <- as.integer(covid_table2$Day)
# WE check which columns have > or < characters
which(apply(covid_table2, 2, function(x) any(grepl("(>|<)", x))))
# The output shows us the columns CRP, Procalcitonin and Ferritin have these characters. We convert the rest of the columns to numeric.
covid_table2[,3:18] <- sapply(covid_table2[,3:18], as.numeric)
covid_table2[,22:27] <- sapply(covid_table2[,22:27], as.numeric)
# We check if there's any cell in the ID column of the first table that doesn't follow the COAG-HSJD-x pattern.
covid_table1$ID[!(grepl("^COAG-HSJD.*$", covid_table1$ID))]
# We check if there's any cell in the ID column of the first table that doesn't follow the COAG-HSJD-x pattern.
covid_table2$ID[!(grepl("^COAG-HSJD.*$", covid_table2$ID))]
covid_table2$ID[covid_table2$ID == "COAG-HSDJ-202"] <- "COAG-HSJD-202"
covid_table2$ID[covid_table2$ID == "COAG-HSDJ-203"] <- "COAG-HSJD-203"
covid_table2$ID[covid_table2$ID == "COAG-HSDJ-206"] <- "COAG-HSJD-206"
covid_table1[duplicated(covid_table1$ID), ]
View(covid_table1)
View(covid_table1)
# Patient with ID COAG-HSJD-086 is duplicated. This isn't a duplicate row but instead, one of these rows should be another patient ( we choose COAG-HSJD-095, the next available ID)
covid_table1[77,1] <- "COAG-HSJD-095"
# Patient with ID COAG-HSJD-197 is duplicated. This isn't a duplicate row but instead, one of these rows should be another patient ( we choose COAG-HSJD-198)
covid_table1[167,1] <- "COAG-HSJD-198"
# Patient with ID COAG-HSJD-244 is duplicated. This isn't a duplicate row but instead, one of these rows should be another patient (we choose COAG-HSJD-245)
covid_table1[211,1] <- "COAG-HSJD-245"
# Now we can remove what we're sure are duplicate rows:
covid_table1 <- covid_table1[!duplicated(covid_table1$ID), ]
covid_table1[duplicated(covid_table1$ID), ]
covid_data <- merge(covid_table1, covid_table2, by = "ID")
ExpData(data = covid_data, type=2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(DataExplorer)
library(mlbench)
library(GGally)
library(tidyverse)
library(vtable)
library(SmartEDA)
library(corrplot)
heart_data <- read.csv("data/heart_disease_dataset.csv", sep=" ", na.strings="?")
colnames(heart_data) <- c("Age", "Sex", "ChestPain", "RBP", "Cholesterol", "FastingBloodSugar", "RestingECResults", "MaxHeartRate", "ExInducedAngina", "Oldpeak", "Slope", "NbMajorVessels", "Thalassemia", "DiagnosisHD", "PatetientID")
# We use dim() to obtain the number of rows and columns on our dataset
dim(heart_data)
cont_features <- c("Age", "RBP", "Cholesterol", "MaxHeartRate", "Oldpeak")
cat_features <- c("Sex", "ChestPain", "FastingBloodSugar", "RestingECResults", "ExInducedAngina", "Slope", "NbMajorVessels", "Thalassemia", "DiagnosisHD")
# We replace the numbers with "male" and "female" for the Sex column
heart_data["Sex"][heart_data["Sex"] == 1] <- "male"
heart_data["Sex"][heart_data["Sex"] == 0] <- "female"
ExpData(data=heart_data, type=2, fun = c("min", "max"))
heart_data$NbMajorVessels[is.na(heart_data$NbMajorVessels)] <- median(heart_data$NbMajorVessels, na.rm = TRUE)
heart_data$Thalassemia[is.na(heart_data$Thalassemia)] <- median(heart_data$Thalassemia, na.rm = TRUE)
heart_data
library(readxl)
# We import from the Excel files
covid_table1 <- read_excel("covid-data/Table\ 1.xlsx", na = "NI")
covid_table2 <- read_excel("covid-data/Table\ 2.xlsx", na = "NI")
# Because there's two header rows, we need to use the first row as the header
names(covid_table1) <- covid_table1[1,]
covid_table1 <- covid_table1[-1,]
# The first cell in the first column is a joint cell, meaning the cell 1,1 is now empty
covid_table2[1,1] <- "ID"
# Now we can do the same thing we did with Table1
names(covid_table2) <- covid_table2[1,]
covid_table2 <- covid_table2[-1,]
# The second table has joint cells in the first column. This translates to empty cells in our dataframe. To fix this:
for (i in 1:nrow(covid_table2)){
if(is.na(covid_table2[i,1])){
covid_table2[i,1] <- last_value
} else{
last_value <- covid_table2[i,1]
}
}
# Table2 has two types of missing values: NI and ND. NI were replaced by NA when importing the data, but we still have ND values.
covid_table2 <- replace(covid_table2, covid_table2 == "ND", NA)
ExpData(data=covid_table1, type=2)
# For the gender column mistakes, we have no indication of what the correct value is. We replace it with NA.
covid_table1$Gender[!(covid_table1$Gender %in% c("F", "M"))] <- NA
# Same for the Death column
covid_table1$Death[!(covid_table1$Death %in% c("No", "Yes"))] <- NA
# For the "Admission to ICU", "ARDS Diagnosis", "CRS Diagnosis", "Use of NIV" and "Use of AMV", we can use the following rule based on the related "Days with -" value. If the "Days with -" value is 0, then it's a No. If it's >0, it's yes.
covid_table1$`Admission to ICU`[(!(covid_table1$`Admission to ICU` %in% c("Yes", "No")) & covid_table1$`Days in ICU` == 0)] <- "No"
covid_table1$`Admission to ICU`[(!(covid_table1$`Admission to ICU` %in% c("Yes", "No")) & covid_table1$`Days in ICU` >= 0)] <- "Yes"
covid_table1$`ARDS Diagnosis`[(!(covid_table1$`ARDS Diagnosis` %in% c("Yes", "No")) & covid_table1$`Days with ARDS` == 0)] <- "No"
covid_table1$`ARDS Diagnosis`[(!(covid_table1$`ARDS Diagnosis` %in% c("Yes", "No")) & covid_table1$`Days with ARDS` >= 0)] <- "Yes"
covid_table1$`CRS Diagnosis`[(!(covid_table1$`CRS Diagnosis` %in% c("Yes", "No")) & covid_table1$`Days with CRS` == 0)] <- "No"
covid_table1$`CRS Diagnosis`[(!(covid_table1$`CRS Diagnosis` %in% c("Yes", "No")) & covid_table1$`Days with CRS` >= 0)] <- "Yes"
covid_table1$`Use of NIV`[(!(covid_table1$`Use of NIV` %in% c("Yes", "No")) & covid_table1$`Days with NIV` == 0)] <- "No"
covid_table1$`Use of NIV`[(!(covid_table1$`Use of NIV` %in% c("Yes", "No")) & covid_table1$`Days with NIV` >= 0)] <- "Yes"
covid_table1$`Use of AMV`[(!(covid_table1$`Use of AMV` %in% c("Yes", "No")) & covid_table1$`Days with AMV` == 0)] <- "No"
covid_table1$`Use of AMV`[(!(covid_table1$`Use of AMV` %in% c("Yes", "No")) & covid_table1$`Days with AMV` >= 0)] <- "Yes"
ExpData(data=covid_table1, type=2)
ExpData(data=covid_table2, type=2)
# When checking with the function ExpData, we can see all of our vairable types are Char.
# We turn the column BMI to numeric:
covid_table1$BMI <- as.numeric(covid_table1$BMI)
#We turn the columns Age, Days in ICU, Days with ARDS, Days with CRS, Days with NIV, Days with AMV and Days of hospitalization into integers (we use column indexes).
for(i in c(2, 8, 10, 12, 14, 16, 17)){
covid_table1[,i] <- sapply(covid_table1[,i], as.integer)
}
# The first column, Day, is integer
covid_table2$Day <- as.integer(covid_table2$Day)
# WE check which columns have > or < characters
which(apply(covid_table2, 2, function(x) any(grepl("(>|<)", x))))
# The output shows us the columns CRP, Procalcitonin and Ferritin have these characters. We convert the rest of the columns to numeric.
covid_table2[,3:18] <- sapply(covid_table2[,3:18], as.numeric)
covid_table2[,22:27] <- sapply(covid_table2[,22:27], as.numeric)
# We check if there's any cell in the ID column of the first table that doesn't follow the COAG-HSJD-x pattern.
covid_table1$ID[!(grepl("^COAG-HSJD.*$", covid_table1$ID))]
# We check if there's any cell in the ID column of the first table that doesn't follow the COAG-HSJD-x pattern.
covid_table2$ID[!(grepl("^COAG-HSJD.*$", covid_table2$ID))]
covid_table2$ID[covid_table2$ID == "COAG-HSDJ-202"] <- "COAG-HSJD-202"
covid_table2$ID[covid_table2$ID == "COAG-HSDJ-203"] <- "COAG-HSJD-203"
covid_table2$ID[covid_table2$ID == "COAG-HSDJ-206"] <- "COAG-HSJD-206"
covid_table1[duplicated(covid_table1$ID), ]
# Patient with ID COAG-HSJD-197 is duplicated. This isn't a duplicate row but instead, one of these rows should be another patient ( we choose COAG-HSJD-198)
covid_table1[167,1] <- "COAG-HSJD-198"
# Patient with ID COAG-HSJD-244 is duplicated. This isn't a duplicate row but instead, one of these rows should be another patient (we choose COAG-HSJD-245)
covid_table1[211,1] <- "COAG-HSJD-245"
# Now we can remove what we're sure are duplicate rows:
covid_table1 <- covid_table1[!duplicated(covid_table1$ID), ]
covid_table1[duplicated(covid_table1$ID), ]
covid_data <- merge(covid_table1, covid_table2, by = "ID")
ExpData(data = covid_data, type=2)
#covid_table1[,2] <- as.numeric(covid_table1[,2])
#ExpData(data=covid_table1, type=2)
sessionInfo()
patients <- unique(covid_data$ID)
patients
len(patients)
length(patients)
length(unique(covid_data$ID))
ExpData(data = covid_data, type=2)
ExpData(data = covid_data, type=2, fun = c("min", "max"))
hist(covid_data$Age, col = "azure2", ylim=c(0,50),
main = paste("Age"), xlab = "Age", ylab = "Frequency (n)")
covid_table1_final <- covid_table1[which(unique(covid_data$ID) %in% covid_data$ID), ]
covid_table1_final <- covid_table1[covid_table1$ID %in% covid_data$ID), ]
which(unique(covid_data$ID)
hist(covid_table1_final$Age, col = "azure2", ylim=c(0,50),
View(covid_table1_final)
View(covid_table1_final)
covid_table1_final <- covid_table1[which(unique(covid_data$ID) %in% covid_data$ID), ]
covid_table1_final <- covid_table1[which(unique(covid_data$ID) %in% covid_data$ID), ]
hist(covid_table1_final$Age, col = "azure2", ylim=c(0,50),
main = paste("Age"), xlab = "Age", ylab = "Frequency (n)")
hist(covid_table1_final$Age, col = "azure2", ylim=c(0,30),
main = paste("Age"), xlab = "Age", ylab = "Frequency (n)")
hist(covid_table1_final$Age, col = "azure2", ylim=c(0,50),
main = paste("Age"), xlab = "Age", ylab = "Frequency (n)")
hist(covid_table1_final$Age, ylim=c(0,50),
main = paste("Age"), xlab = "Age", ylab = "Frequency (n)")
hist(covid_table1_final$Age, ylim=c(0,50), main = paste("Age"), xlab = "Age (years)", ylab = "Frequency (n)")
hist(covid_table1_final$Age, ylim=c(0,50), main = paste("Age"), xlab = "Age (years)", ylab = "Frequency (n)", col = "azure")
hist(covid_table1_final$Age, ylim=c(0,50), main = paste("Age"), xlab = "Age (years)", ylab = "Frequency (n)", col = "azure2")
hist(covid_table1_final$Age, ylim=c(0,50), main = paste("Age"), xlab = "Age (years)", ylab = "Frequency (n)", col = "blue")
hist(covid_table1_final$Age, ylim=c(0,50), main = paste("Age"), xlab = "Age (years)", ylab = "Frequency (n)", col = "azure")
covid_table1_final$`Clinical Classification` <- with(covid_table1_final,
case_when(
covid_table1_final$`Use of Niv` == "No" &
covid_table1_final$`Use of AMV` == "No" &
covid_table1_final$`ARDS Diagnosis` == "No" ~ "G1",
covid_table1_final$`Use of Niv` == "Yes" &
covid_table1_final$`Use of AMV` == "No" &
covid_table1_final$`ARDS Diagnosis` == "Yes" ~ "G3",
covid_table1_final$`Use of AMV` == "Yes" &
covid_table1_final$`ARDS Diagnosis` == "No" ~ "G4",
covid_table1_final$`ARDS Diagnosis` == "No" ~ "G2",
))
covid_table1_final$`Clinical Classification` <- with(covid_table1_final,
case_when(
covid_table1_final$`Use of NIV` == "No" &
covid_table1_final$`Use of AMV` == "No" &
covid_table1_final$`ARDS Diagnosis` == "No" ~ "G1",
covid_table1_final$`Use of NIV` == "Yes" &
covid_table1_final$`Use of AMV` == "No" &
covid_table1_final$`ARDS Diagnosis` == "Yes" ~ "G3",
covid_table1_final$`Use of AMV` == "Yes" &
covid_table1_final$`ARDS Diagnosis` == "No" ~ "G4",
covid_table1_final$`ARDS Diagnosis` == "No" ~ "G2",
))
View(covid_table1_final)
View(covid_table1_final)
covid_table1_final$`Clinical Classification` <- with(covid_table1_final,
case_when(
covid_table1_final$`Use of NIV` == "No" &
covid_table1_final$`Use of AMV` == "No" &
covid_table1_final$`ARDS Diagnosis` == "No" ~ "G1",
covid_table1_final$`Use of NIV` == "Yes" &
covid_table1_final$`Use of AMV` == "No" &
covid_table1_final$`ARDS Diagnosis` == "Yes" ~ "G3",
covid_table1_final$`Use of AMV` == "Yes" &
covid_table1_final$`ARDS Diagnosis` == "No" ~ "G4",
(covid_table1_final$`Use of NIV` == "No" |
covid_table1_final$`Use of NIV` == "Yes") &
(covid_table1_final$`Use of AMV` == "No" |
covid_table1_final$`Use of AMV` == "Yes") &
covid_table1_final$`ARDS Diagnosis` == "No"~ "G2",
))
covid_table1_final$`Clinical Classification` <- with(covid_table1_final,
case_when(
covid_table1_final$`Use of NIV` == "No" &
covid_table1_final$`Use of AMV` == "No" &
covid_table1_final$`ARDS Diagnosis` == "No" ~ "G1",
covid_table1_final$`Use of NIV` == "Yes" &
covid_table1_final$`Use of AMV` == "No" &
covid_table1_final$`ARDS Diagnosis` == "Yes" ~ "G3",
covid_table1_final$`Use of AMV` == "Yes" &
covid_table1_final$`ARDS Diagnosis` == "No" ~ "G4",
covid_table1_final$`ARDS Diagnosis` == "No" ~ "G2"
))
View(covid_table1_final)
View(covid_table1_final)
covid_table1_final$`Clinical Classification` <- with(covid_table1_final,
case_when(
covid_table1_final$`Use of NIV` == "No" &
covid_table1_final$`Use of AMV` == "No" &
covid_table1_final$`ARDS Diagnosis` == "No" ~ "G1",
covid_table1_final$`Use of NIV` == "Yes" &
covid_table1_final$`Use of AMV` == "No" &
covid_table1_final$`ARDS Diagnosis` == "Yes" ~ "G3",
covid_table1_final$`Use of AMV` == "Yes" &
covid_table1_final$`ARDS Diagnosis` == "Yes" ~ "G4",
covid_table1_final$`ARDS Diagnosis` == "No" ~ "G2"
))
View(covid_table1_final)
View(covid_table1_final)
ExpData(data = covid_table1_final, type=2, fun = c("min", "max"))
View(covid_table1_final)
View(covid_table1_final)
par(mfrow=c(2,2))
hist(covid_table1_final$Age, ylim=c(0,50), main = paste("Age"), xlab = "Age (years)", ylab = "Frequency (n)", col = "azure")
covid_table1_final$`Clinical Classification` <- with(covid_table1_final,
case_when(
covid_table1_final$`Use of NIV` == "No" &
covid_table1_final$`Use of AMV` == "No" &
covid_table1_final$`ARDS Diagnosis` == "No" ~ "G1",
covid_table1_final$`Use of NIV` == "Yes" &
covid_table1_final$`Use of AMV` == "No" &
covid_table1_final$`ARDS Diagnosis` == "Yes" ~ "G3",
covid_table1_final$`Use of AMV` == "Yes" &
covid_table1_final$`ARDS Diagnosis` == "Yes" ~ "G4",
covid_table1_final$`ARDS Diagnosis` == "No" ~ "G2"
))
table_1b_data <- matrix(c('Clinical\nclassification','NIV','AMV','ARDS',
'G1', '-', '-', '-',
'G2', '-/+', '+/-', '-',
'G3', '+', '-', '+',
'G4', '-/+', '+','+'),
nrow = 5, ncol = 4)
colnames(table_data) <- c("", "NIV", "AMV", "ARDS")
colnames(table_1b_data) <- c("", "NIV", "AMV", "ARDS")
p3 <- barplot(table(covid_table1_final$`Clinical Classification`),col=brewer.pal(n=5,name="Set3"), ylim = c(0,80),
main = "Clinical Classification",
xlab = "Clinical Classification",
ylab = "Frequency (n)",
)
table_1b_data <- matrix(c('Clinical\nclassification','NIV','AMV','ARDS',
'G1', '-', '-', '-',
'G2', '-/+', '+/-', '-',
'G3', '+', '-', '+',
'G4', '-/+', '+','+'),
nrow = 5, ncol = 4)
colnames(table_1b_data) <- c("", "NIV", "AMV", "ARDS")
plot(c(0, ncol(table_1b_data)+1), c(0, nrow(table_1b_data)+1), type = "n", xlab = "", ylab = "",
xaxt = "n", yaxt = "n")
text(x = rep(1:ncol(table_1b_data), nrow(table_1b_data)),
y = rep(nrow(table_1b_data):1, each = ncol(table_1b_data)),
labels = as.vector(table_1b_data), cex = 1)
# Plotting
par(mfrow=c(2,2))
table_1b_data <- matrix(c('Clinical\nclassification','NIV','AMV','ARDS',
'G1', '-', '-', '-',
'G2', '-/+', '+/-', '-',
'G3', '+', '-', '+',
'G4', '-/+', '+','+'),
nrow = 5, ncol = 4)
colnames(table_1b_data) <- c("", "NIV", "AMV", "ARDS")
plot(c(0, ncol(table_1b_data)+1), c(0, nrow(table_1b_data)+1), type = "n", xlab = "", ylab = "",
xaxt = "n", yaxt = "n")
text(x = rep(1:ncol(table_1b_data), nrow(table_1b_data)),
y = rep(nrow(table_1b_data):1, each = ncol(table_1b_data)),
labels = as.vector(table_1b_data), cex = 1)
p3 <- barplot(table(covid_table1_final$`Clinical Classification`),col=brewer.pal(n=5,name="Set3"), ylim = c(0,80),
main = "Clinical Classification",
xlab = "Clinical Classification",
ylab = "Frequency (n)",
)
text(x = p3, y = table(df1$Group)+10, label = table(df1$Group))
p3 <- barplot(table(covid_table1_final$`Clinical Classification`),col=brewer.pal(n=5,name="Set3"), ylim = c(0,80),
main = "Clinical Classification",
xlab = "Clinical Classification",
ylab = "Frequency (n)",
)
p3 <- barplot(table(covid_table1_final$`Clinical Classification`), ylim = c(0,80),
main = "Clinical Classification",
xlab = "Clinical Classification",
ylab = "Frequency (n)",
)
text(x = p3, y = table(df1$Group)+10, label = table(df1$Group))
text(x = p3, y = table(covid_table1_final$`Clinical Classification`)+10, label = table(covid_table1_final$`Clinical Classification`))
p3 <- barplot(table(covid_table1_final$`Clinical Classification`), ylim = c(0,80),
main = "Clinical Classification",
xlab = "Clinical Classification",
ylab = "Frequency (n)",
)
figure_1d <- barplot(table(covid_table1_final$Death), ylim = c(0,160), main = "Vital Status", xlab = "Death", ylab = "Frequency (n)",
)
text(x = figure_1d, y = table(covid_table1_final$Death), label = table(covid_table1_final$Death))
figure_1d <- barplot(table(covid_table1_final$Death), ylim = c(0,160), main = "Vital Status", xlab = "Death", ylab = "Frequency (n)",
), text(x = figure_1d, y = table(covid_table1_final$Death), label = table(covid_table1_final$Death))
figure_1d <- barplot(table(covid_table1_final$Death), ylim = c(0,160), main = "Vital Status", xlab = "Death", ylab = "Frequency (n)",
) text(x = figure_1d, y = table(covid_table1_final$Death), label = table(covid_table1_final$Death))
text(x = figure_1d, y = table(covid_table1_final$Death), label = table(covid_table1_final$Death))
plot.new()
figure_1d <- barplot(table(covid_table1_final$Death), ylim = c(0,160), main = "Vital Status", xlab = "Death", ylab = "Frequency (n)",
)
text(x = figure_1d, y = table(covid_table1_final$Death), label = table(covid_table1_final$Death))
plot.new(figure_1d <- barplot(table(covid_table1_final$Death), ylim = c(0,160), main = "Vital Status", xlab = "Death", ylab = "Frequency (n)",
)
text(x = figure_1d, y = table(covid_table1_final$Death), label = table(covid_table1_final$Death)))
